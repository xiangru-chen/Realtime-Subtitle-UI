import google.generativeai as genai
from google.generativeai.types import HarmCategory, HarmBlockThreshold

## TODO
GOOGLE_API_KEY=""
INSTRUCTION="You are a tool for summarizing and polishing texts generated by speech-to-text model. Make sure the text is clear, concise, and uses the same language as the original text."


def setup_api():
    genai.configure(api_key=GOOGLE_API_KEY)

    global LLMmodel
    LLMmodel = genai.GenerativeModel(
        model_name='gemini-1.5-flash', 
        system_instruction=INSTRUCTION, 
        safety_settings={
            # HarmCategory.HARM_CATEGORY_UNSPECIFIED: HarmBlockThreshold.BLOCK_NONE,
            # HarmCategory.HARM_CATEGORY_DEROGATORY: HarmBlockThreshold.BLOCK_NONE,
            # HarmCategory.HARM_CATEGORY_TOXICITY: HarmBlockThreshold.BLOCK_NONE,
            # HarmCategory.HARM_CATEGORY_VIOLENCE: HarmBlockThreshold.BLOCK_NONE,
            # HarmCategory.HARM_CATEGORY_SEXUAL: HarmBlockThreshold.BLOCK_NONE,
            # HarmCategory.HARM_CATEGORY_MEDICAL: HarmBlockThreshold.BLOCK_NONE,
            # HarmCategory.HARM_CATEGORY_DANGEROUS: HarmBlockThreshold.BLOCK_NONE,
            HarmCategory.HARM_CATEGORY_HARASSMENT: HarmBlockThreshold.BLOCK_NONE,
            HarmCategory.HARM_CATEGORY_HATE_SPEECH: HarmBlockThreshold.BLOCK_NONE,
            HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: HarmBlockThreshold.BLOCK_NONE,
            HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: HarmBlockThreshold.BLOCK_NONE,
        },
        generation_config=genai.GenerationConfig(temperature=0.1),  # [0.0, 2.0]
    )

    global chat
    chat = LLMmodel.start_chat(history=[])
    _test_api()

def _test_api():
    try:
        prompt = "test"
        response = chat.send_message(
            prompt, 
            generation_config=genai.GenerationConfig(max_output_tokens=1),
        )
        print("Set Gemini API sucessfully!!")
    except Exception as e:
        print("There seems to be something wrong with your Gemini API...")
        print(e)


def get_response(message, max_output_tokens=25):
    response = chat.send_message(
        message,
        generation_config=genai.GenerationConfig(max_output_tokens=max_output_tokens),
    )
    return response.text
